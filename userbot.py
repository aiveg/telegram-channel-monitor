#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telethon import TelegramClient
import asyncio
import logging
from datetime import datetime
from config import API_ID, API_HASH, CHANNEL_IDS, NOTIFICATION_CHAT_ID, SESSION_NAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
channels_data = {}

def get_channel_inline_link(channel_info):
    """–°–æ–∑–¥–∞—ë–º inline-—Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)"""
    if hasattr(channel_info, 'username') and channel_info.username:
        return f"[{channel_info.title}](https://t.me/{channel_info.username})"
    else:
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        channel_id_clean = str(channel_info.id)[4:]  # –£–±–∏—Ä–∞–µ–º -100 –∏–∑ ID
        return f"[{channel_info.title}](tg://resolve?domain=c/{channel_id_clean})"

async def get_channel_participants_count(channel_id):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
    try:
        channel = await client.get_entity(channel_id)
        if hasattr(channel, 'participants_count') and channel.participants_count is not None:
            return channel.participants_count
        
        try:
            participants = await client.get_participants(channel, limit=0)
            return participants.total
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {channel.title}: {e}")
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {channel_id}: {e}")
        return None

async def get_recent_participants_info(channel_id):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö (–¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤)"""
    try:
        participants = await client.get_participants(channel_id, limit=10)
        
        recent_users = []
        for i, user in enumerate(participants, 1):
            user_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            # –£–º–Ω–∞—è —Å—Å—ã–ª–∫–∞: username –∏–ª–∏ tg://user?id=
            if user.username:
                user_link = f"@{user.username}"
            else:
                user_link = f"[–ü—Ä–æ—Ñ–∏–ª—å](tg://user?id={user.id})"
            
            user_info = f"{i}. **{user_name}** | {user_link} | ID: `{user.id}`"
            recent_users.append(user_info)
        
        return "\n".join(recent_users)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {channel_id}: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

async def detailed_participants_check(channel_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–¥–æ 200)"""
    try:
        channel_data = channels_data[channel_id]
        channel_info = channel_data['info']
        channel_title = channel_info.title
        channel_inline_link = get_channel_inline_link(channel_info)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await client.get_participants(channel_id, limit=200)
        current_participants_set = {user.id for user in participants}
        
        last_participants_set = channel_data['last_participants']
        
        if last_participants_set is not None:
            # –ö—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
            new_users = current_participants_set - last_participants_set
            for user_id in new_users:
                user = next((user for user in participants if user.id == user_id), None)
                if user:
                    user_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    
                    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user.username:
                        user_link = f"@{user.username}"
                    else:
                        user_link = f"[–ü—Ä–æ—Ñ–∏–ª—å](tg://user?id={user.id})"
                    
                    message = (
                        f"‚úÖ **–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫!**\n"
                        f"üì∫ –ö–∞–Ω–∞–ª: {channel_inline_link}\n"
                        f"üë§ –ò–º—è: **{user_name}**\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {user_link}\n"
                        f"üÜî ID: `{user.id}`\n"
                        f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(current_participants_set)}\n"
                        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                    )
                    await client.send_message(
                        NOTIFICATION_CHAT_ID, 
                        message,
                        parse_mode='markdown',
                        link_preview=False
                    )
                    logger.info(f"‚úÖ [{channel_title}] –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_name} (ID: {user.id})")
            
            # –ö—Ç–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è
            left_user_ids = last_participants_set - current_participants_set
            if left_user_ids:
                for user_id in left_user_ids:
                    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø–∏—Å–∞–≤—à–µ–≥–æ—Å—è
                    user_link = f"[–ü—Ä–æ—Ñ–∏–ª—å](tg://user?id={user_id})"
                    
                    message = (
                        f"‚ùå **–û—Ç–ø–∏—Å–∫–∞**\n"
                        f"üì∫ –ö–∞–Ω–∞–ª: {channel_inline_link}\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {user_link}\n"
                        f"üÜî ID: `{user_id}`\n"
                        f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(current_participants_set)}\n"
                        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
                        f"‚ÑπÔ∏è –ò–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª)"
                    )
                    await client.send_message(
                        NOTIFICATION_CHAT_ID, 
                        message,
                        parse_mode='markdown',
                        link_preview=False
                    )
                    logger.info(f"‚ùå [{channel_title}] –û—Ç–ø–∏—Å–∫–∞: ID {user_id}")
        
        channel_data['last_participants'] = current_participants_set
        return len(current_participants_set)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {channel_id}: {e}")
        return None

async def check_single_channel(channel_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"""
    try:
        channel_data = channels_data[channel_id]
        channel_info = channel_data['info']
        channel_title = channel_info.title
        channel_inline_link = get_channel_inline_link(channel_info)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if channel_data['detailed_mode']:
            current_count = await detailed_participants_check(channel_id)
            if current_count is None:
                current_count = await get_channel_participants_count(channel_id)
        else:
            current_count = await get_channel_participants_count(channel_id)
        
        if current_count is None:
            logger.warning(f"‚ö†Ô∏è [{channel_title}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            return
        
        last_count = channel_data['last_count']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º
        if current_count >= 200 and channel_data['detailed_mode']:
            channel_data['detailed_mode'] = False
            switch_msg = (
                f"üîÑ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º**\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {channel_inline_link}\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {current_count} (‚â•200)\n"
                f"‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            await client.send_message(
                NOTIFICATION_CHAT_ID, 
                switch_msg,
                parse_mode='markdown',
                link_preview=False
            )
            logger.info(f"üîÑ [{channel_title}] –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º")
        
        elif current_count < 200 and not channel_data['detailed_mode']:
            channel_data['detailed_mode'] = True
            switch_msg = (
                f"üîÑ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º**\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {channel_inline_link}\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {current_count} (<200)\n"
                f"‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            await client.send_message(
                NOTIFICATION_CHAT_ID, 
                switch_msg,
                parse_mode='markdown',
                link_preview=False
            )
            logger.info(f"üîÑ [{channel_title}] –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if not channel_data['detailed_mode'] and last_count is not None:
            if current_count > last_count:
                diff = current_count - last_count
                recent_users = await get_recent_participants_info(channel_id)
                
                message = (
                    f"‚úÖ **–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: +{diff}**\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {channel_inline_link}\n"
                    f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {current_count}\n"
                    f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    f"üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:**\n{recent_users}"
                )
                await client.send_message(
                    NOTIFICATION_CHAT_ID, 
                    message,
                    parse_mode='markdown',
                    link_preview=False
                )
                logger.info(f"üìà [{channel_title}] –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ +{diff}, –≤—Å–µ–≥–æ: {current_count}")
                
            elif current_count < last_count:
                diff = last_count - current_count
                recent_users = await get_recent_participants_info(channel_id)
                
                message = (
                    f"‚ùå **–û—Ç–ø–∏—Å–∫–∏: -{diff}**\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {channel_inline_link}\n"
                    f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {current_count}\n"
                    f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    f"üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:**\n{recent_users}"
                )
                await client.send_message(
                    NOTIFICATION_CHAT_ID, 
                    message,
                    parse_mode='markdown',
                    link_preview=False
                )
                logger.info(f"üìâ [{channel_title}] –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ -{diff}, –≤—Å–µ–≥–æ: {current_count}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if last_count is None:
            mode_name = "–¥–µ—Ç–∞–ª—å–Ω—ã–π" if channel_data['detailed_mode'] else "–ø—Ä–æ—Å—Ç–æ–π"
            logger.info(f"üîÑ [{channel_title}] –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count} ({mode_name} —Ä–µ–∂–∏–º)")
        elif current_count == last_count:
            mode_name = "–¥–µ—Ç–∞–ª—å–Ω—ã–π" if channel_data['detailed_mode'] else "–ø—Ä–æ—Å—Ç–æ–π"
            logger.info(f"üìä [{channel_title}] –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {current_count} ({mode_name} —Ä–µ–∂–∏–º)")
        
        channel_data['last_count'] = current_count
        
    except Exception as e:
        channel_title = channels_data.get(channel_id, {}).get('info', {}).get('title', str(channel_id))
        logger.error(f"‚ùå [{channel_title}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

async def check_all_channels_periodically():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [check_single_channel(channel_id) for channel_id in channels_data.keys()]
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            try:
                error_msg = f"‚ö†Ô∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**\n`{str(e)}`"
                await client.send_message(
                    NOTIFICATION_CHAT_ID, 
                    error_msg,
                    parse_mode='markdown',
                    link_preview=False
                )
            except:
                pass
        
        await asyncio.sleep(30)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω—ã–π userbot...")
    
    await client.start()
    
    me = await client.get_me()
    logger.info(f"‚úÖ Userbot –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {me.first_name} (@{me.username})")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    successful_channels = []
    failed_channels = []
    
    for channel_id in CHANNEL_IDS:
        try:
            channel_info = await client.get_entity(channel_id)
            initial_count = await get_channel_participants_count(channel_id)
            
            if initial_count is None:
                failed_channels.append(f"‚ùå **{channel_info.title}** - –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
            detailed_mode = initial_count < 200
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channels_data[channel_id] = {
                'last_participants': None,
                'detailed_mode': detailed_mode,
                'last_count': None,
                'info': channel_info
            }
            
            mode_name = "–¥–µ—Ç–∞–ª—å–Ω—ã–π" if detailed_mode else "–ø—Ä–æ—Å—Ç–æ–π"
            mode_emoji = "üîç" if detailed_mode else "üìä"
            channel_inline_link = get_channel_inline_link(channel_info)
            
            successful_channels.append(
                f"‚úÖ {channel_inline_link} - {initial_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({mode_emoji} {mode_name})"
            )
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {channel_info.title} ({initial_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {mode_name} —Ä–µ–∂–∏–º)")
            
        except Exception as e:
            failed_channels.append(f"‚ùå **{channel_id}** - –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    if not successful_channels:
        error_msg = "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É!**"
        await client.send_message(
            NOTIFICATION_CHAT_ID, 
            error_msg,
            parse_mode='markdown',
            link_preview=False
        )
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        notification_chat = await client.get_entity(NOTIFICATION_CHAT_ID)
        chat_name = getattr(notification_chat, 'title', '–õ–°')
        logger.info(f"üì≤ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤: {chat_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å —á–∞—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_msg = (
        f"ü§ñ **–ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!**\n"
        f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n\n"
        f"üì∫ **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã ({len(successful_channels)}):**\n" +
        "\n".join(successful_channels)
    )
    
    if failed_channels:
        start_msg += f"\n\n‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏:**\n" + "\n".join(failed_channels)
    
    await client.send_message(
        NOTIFICATION_CHAT_ID, 
        start_msg,
        parse_mode='markdown',
        link_preview=False
    )
    
    logger.info(f"‚ú® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(successful_channels)} –∫–∞–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    task = asyncio.create_task(check_all_channels_periodically())
    
    try:
        await client.run_until_disconnected()
    finally:
        task.cancel()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
